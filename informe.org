#+SETUPFILE: ./org/theme-readtheorg.setup
#+SETUPFILE: ./org/setup.org

#+BEGIN_EXPORT latex
\begin{titlepage}
    \hfill\includegraphics[width=6cm]{assets/logofiuba.jpg}
    \centering
    \vfill
    \Huge \textbf{Trabajo Práctico: Melodia}
    \vskip0.5cm
    \Large \textbf{Grupo 2}
    \vskip2cm
    \Large [TA049] Ingenieria de Software II \\
    Segundo cuatrimestre de 2025\\
    \vfill
    \begin{tabular}{ | l | l | l | }
      \hline
      Alumno & Padrón & Email \\ \hline
      BRZOZA, Valeria & 107523 & vbrzoza@fi.uba.ar \\ \hline
      CICHERO, Tomas & 107973 & tcichero@fi.uba.ar  \\ \hline
      CONTRERAS VILLARROEL, Ricardo Luis & 107239 & rcontreras@fi.uba.ar \\ \hline
      DEALBERA, Pablo Andres & 106858 & pdealbera@fi.uba.ar \\ \hline
      LANZILOTTA, Valentina & 108257 & vlanzilotta@fi.uba.ar \\ \hline
      MAKKOS, Juan Sebastian & 106229 & jmakkos@@fi.uba.ar \\ \hline
    \end{tabular}
    \vfill
\end{titlepage}
\renewcommand{\contentsname}{Índice}
\tableofcontents
\newpage
\definecolor{bg}{rgb}{0.95,0.95,0.95}
#+END_EXPORT

* Architecture Diagram

#+BEGIN_SRC plantuml :file assets/arch-1.png :exports results
@startuml
!theme plain
skinparam componentStyle rectangle
skinparam backgroundColor white
skinparam component {
    BackgroundColor lightblue
    BorderColor black
    FontSize 12
}
skinparam database {
    BackgroundColor lightgreen
    BorderColor black
}
skinparam cloud {
    BackgroundColor lightyellow
    BorderColor black
}
skinparam direction top to bottom

title System Architecture - Layered View

' Top Layer - Infrastructure & Cloud Services
package "Infrastructure & Cloud Services" {
    cloud "External Services" {
        component [Supabase\nStorage + Realtime] as supabase
        component [Firebase\nCloud Messaging] as firebase
        component [Twilio\nSMS/WhatsApp] as twilio
    }

    component [PAAS Platform\n(Heroku/Railway)] as paas
    component [Monitoring\n(Datadog/Grafana)] as monitoring
    component [Docker\nContainers] as docker
}

' Data Storage Layer
package "Data Storage Layer" {
    database [PostgreSQL\n(SQL Database)\n\nUser Data\nTransactions\nRelational Data] as postgres
    database [MongoDB\n(NoSQL Database)\n\nLogs\nAnalytics\nDocument Storage] as mongo
}

' Microservices Layer
package "Microservices Layer" {
    component [Main API Service\n(Node.js + Express/Fastify)\n\nAuthentication\nBusiness Logic\nAPI Gateway] as mainapi
    component [ML Service\n(Python + FastAPI/Flask)\n\nML Algorithms\nModel Training\nPredictions] as mlservice
}

' Bottom Layer - Client Applications
package "Client Applications" {
    component [Mobile App\n(React Native)] as mobile
    component [Backoffice\n(React/Vue.js/Next.js)] as webapp
}

' Vertical connections (bottom to top)
mobile -up-> mainapi : REST/GraphQL
webapp -up-> mainapi : REST/GraphQL

mainapi -up-> postgres : SQL Operations
mainapi -up-> mongo : NoSQL Operations
mlservice -up-> mongo : ML Data

mainapi -up-> docker : Containerized
mlservice -up-> docker : Containerized
docker -up-> paas : Deployment

mainapi -up-> monitoring : Metrics & Logs
mlservice -up-> monitoring : ML Metrics

' Cross-layer connections
mobile -up-> supabase : Chat & Media
mobile -up-> firebase : Push Notifications
mainapi -up-> supabase : Media Storage
mainapi -up-> twilio : Messaging
mainapi --> mlservice : Internal API

@enduml
#+END_SRC

#+RESULTS:
[[file:assets/arch-1.png]]

** Microservicios

#+BEGIN_SRC plantuml :file assets/arch-microservices.png :exports results
@startuml
!theme plain
skinparam componentStyle rectangle
skinparam backgroundColor white
skinparam component {
    BackgroundColor lightblue
    BorderColor black
    FontSize 10
}
skinparam package {
    BackgroundColor lightgray
    BorderColor black
}
skinparam direction top to bottom

title Microservices Layer - Detailed Modules

package "Main API Service (Node.js)" {
    package "Authentication & Users" {
        component [User Management\n\n- User Registration\n- Login (Email/Password)\n- Federated Login\n- Password Recovery\n- User Blocking] as userauth
        component [Profile Management\n\n- Edit Profile\n- View Own Profile\n- View Other Profiles\n- User Preferences] as profile
    }

    package "Content Management" {
        component [Artist Management\n\n- Artist Profiles\n- Discography\n- Collaborations\n- Artist Relations\n- Popular Tracks] as artist
        component [Content Catalog\n\n- Song Upload\n- Metadata Management\n- Release Management\n- Content Discovery\n- Search Engine] as catalog
        component [Availability Control\n\n- Regional Availability\n- Time Windows\n- Content Blocking\n- State Transitions] as availability
    }

    package "User Experience" {
        component [Playback Service\n\n- Audio Streaming\n- Playback Controls\n- Queue Management\n- Video Playback] as playback
        component [Library Management\n\n- Playlists Creation\n- Favorites (Liked Songs)\n- Playback History\n- Content Organization] as library
        component [Social Features\n\n- User Following\n- Activity Sharing\n- Friend Activity\n- Content Sharing] as social
    }

    package "Communication" {
        component [Notification Service\n\n- Push Notifications\n- Deep Linking\n- SMS Integration\n- WhatsApp Integration] as notifications
        component [Real-time Features\n\n- Chat Integration\n- Live Updates\n- Activity Streams] as realtime
    }

    package "Administration" {
        component [Admin Panel\n\n- User Administration\n- Content Moderation\n- System Configuration\n- Platform Control] as admin
        component [Metrics & Analytics\n\n- User Metrics\n- Content Metrics\n- Artist Performance\n- Business Intelligence] as metrics
    }
}

package "ML Service (Python)" {
    package "Recommendation Engine" {
        component [Content Recommendations\n\n- Similar Artists\n- Related Songs\n- Personalized Suggestions\n- Collaborative Filtering] as recommendations
        component [Smart Playlists\n\n- Mood Mixes\n- Contextual Playlists\n- Thematic Playlists\n- Time-based Suggestions] as smartplaylists
    }

    package "Intelligent Features" {
        component [Auto-completion\n\n- Metadata Suggestions\n- Fast Complete\n- Content Tagging\n- Genre Classification] as autocomplete
        component [Radio & Discovery\n\n- Radio by Song\n- Auto Play\n- Continuous Play\n- Discovery Engine] as radio
    }

    package "Onboarding Intelligence" {
        component [User Onboarding\n\n- Genre Preferences\n- Artist Recommendations\n- Taste Profiling\n- Initial Setup] as onboarding
    }

    package "Analytics Engine" {
        component [Behavior Analysis\n\n- Listening Patterns\n- User Segmentation\n- Trend Analysis\n- Performance Prediction] as analytics
    }
}

' Inter-service connections
userauth --> recommendations : User Preferences
profile --> onboarding : User Setup
catalog --> autocomplete : Metadata Enhancement
playback --> radio : Playback Context
library --> smartplaylists : User Library Data
social --> analytics : Social Interactions
metrics --> analytics : Platform Metrics
artist --> recommendations : Artist Data

' Notes
note right of userauth
  Handles all authentication flows
  including federated login
end note

note right of recommendations
  ML-powered content discovery
  based on user behavior
end note

note left of autocomplete
  AI-assisted metadata completion
  for artist content uploads
end note

note left of smartplaylists
  Context-aware playlist generation
  using mood and time analysis
end note

@enduml
#+END_SRC

#+RESULTS:
[[file:assets/arch-microservices.png]]

* Decisiones de Arquitectura

** Microservicios
- Por qué se eligieron los microservicios específicos
- Beneficios obtenidos
- Desafíos enfrentados

** Tecnologías Utilizadas
- Razones para elegir Node.js, Python, PostgreSQL, etc.
- Alternativas consideradas y por qué se descartaron
- Integración entre tecnologías

* Funcionalidades Incompletas y Errores Conocidos

** Funcionalidades Pendientes
- Lista de features no implementadas
- Razones por las que no se completaron
- Planes para futuras iteraciones

** Errores Conocidos
- Bugs identificados en la entrega final
- Impacto en la funcionalidad
- Workarounds disponibles

* Problemas Encontrados y Lecciones Aprendidas

** Problemas Técnicos
- Desafíos durante el desarrollo
- Soluciones implementadas
- Tiempo invertido en resolverlos

** Lecciones Aprendidas
- Mejores prácticas descubiertas
- Cambios en el enfoque del proyecto
- Recomendaciones para proyectos futuros

* Demostraciones de Features Destacadas

** Feature 1: [Nombre de la Feature]
- Descripción de la implementación
- Por qué se destaca
- Código o diagrama relevante

** Feature 2: [Nombre de la Feature]
- Descripción de la implementación
- Por qué se destaca
- Código o diagrama relevante

