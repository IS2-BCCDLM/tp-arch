#+SETUPFILE: ./org/theme-readtheorg.setup
#+SETUPFILE: ./org/setup.org

#+BEGIN_EXPORT latex
\begin{titlepage}
    \hfill\includegraphics[width=6cm]{assets/logofiuba.jpg}
    \centering
    \vfill
    \Huge \textbf{Trabajo Práctico: Melodia}
    \vskip0.5cm
    \Large \textbf{Grupo 2}
    \vskip2cm
    \Large [TA049] Ingenieria de Software II \\
    Segundo cuatrimestre de 2025\\
    \vfill
    \begin{tabular}{ | l | l | l | }
      \hline
      Alumno & Padrón & Email \\ \hline
      BRZOZA, Valeria & 107523 & vbrzoza@fi.uba.ar \\ \hline
      CICHERO, Tomas & 107973 & tcichero@fi.uba.ar  \\ \hline
      CONTRERAS VILLARROEL, Ricardo Luis & 107239 & rcontreras@fi.uba.ar \\ \hline
      DEALBERA, Pablo Andres & 106858 & pdealbera@fi.uba.ar \\ \hline
      LANZILOTTA, Valentina & 108257 & vlanzilotta@fi.uba.ar \\ \hline
      MAKKOS, Juan Sebastian & 106229 & jmakkos@@fi.uba.ar \\ \hline
    \end{tabular}
    \vfill
\end{titlepage}
\renewcommand{\contentsname}{Índice}
\tableofcontents
\newpage
\definecolor{bg}{rgb}{0.95,0.95,0.95}
#+END_EXPORT

* Architecture Diagram

#+BEGIN_SRC plantuml :file assets/arch-1.png :exports results
@startuml
!theme plain
skinparam componentStyle rectangle
skinparam backgroundColor white
skinparam component {
    BackgroundColor lightblue
    BorderColor black
    FontSize 10
}
 skinparam database {
    BackgroundColor lightgreen
    BorderColor black
}
skinparam cloud {
    BackgroundColor lightyellow
    BorderColor black
}
skinparam package {
    BackgroundColor lightgray
    BorderColor black
}

title Complete System Architecture - Mobile App & Backoffice Platform

package "Client Applications" {
    component [Mobile App\n(React Native + Expo)\n\n- iOS & Android\n- Push Notifications\n- Real-time Chat\n- Offline Support] as mobile
    component [Backoffice WebApp\n(React/Vue.js/Next.js)\n\n- Admin Dashboard\n- Analytics\n- User Management\n- Content Management] as webapp
}

package "Microservices Backend" {
    component [Main API Service\n(Node.js + Express/Fastify)\n\n- Authentication & Authorization\n- Business Logic\n- API Gateway\n- Rate Limiting] as mainapi
    component [ML Service\n(Python + FastAPI/Flask)\n\n- ML Algorithms\n- Model Training\n- Predictions\n- Data Processing] as mlservice
}

package "Data Layer" {
    database [SQL Database\n(PostgreSQL)\n\n- User Data\n- Business Logic\n- Transactions] as sqldb
    database [NoSQL Database\n(MongoDB)\n\n- Logs\n- Analytics Data\n- Content Storage] as nosqldb
}

package "External Services" {
    cloud "Supabase" {
        component [Supabase Storage\n(Multimedia Content)] as supabase_storage
        component [Supabase Realtime\n(Real-time Chat)] as supabase_realtime
    }
    cloud "Firebase" {
        component [Firebase Cloud Messaging\n(Push Notifications)] as fcm
    }
    cloud "Twilio" {
        component [SMS/WhatsApp\nMessaging] as twilio
    }
}

package "Infrastructure & DevOps" {
    component [Docker Containers\n\n- Lightweight Images\n- Multi-stage Builds\n- Production Ready] as docker
    component [CI/CD Pipeline\n(GitHub Actions)\n\n- Automated Testing\n- Code Coverage (75%+)\n- Lint Checks\n- Auto Deployment] as cicd
    component [Monitoring\n(Datadog/Grafana)\n\n- Performance Metrics\n- Error Tracking\n- Alerting] as monitoring
    component [Logging System\n\n- Error/Warn/Info/Debug\n- Centralized Logs\n- Log Retention] as logging
}

package "Cloud Platform (PAAS)" {
    component [Cloud Deployment\n(Heroku/Railway/Vercel)\n\n- Auto Scaling\n- Load Balancing\n- SSL/TLS] as paas
    component [Kubernetes\n(Optional Migration)\n\n- Container Orchestration\n- Service Discovery\n- Auto Scaling] as k8s
}

package "Code Quality & Testing" {
    component [Testing Suite\n\n- Unit Tests (Backend)\n- Integration Tests\n- Code Coverage > 75%\n- Linting Standards] as testing
    component [Coverage Reports\n(Coveralls/Codecov)\n\n- Automated Reports\n- GitHub Pages\n- Quality Gates] as coverage
}

' Client to Backend connections
mobile --> mainapi : REST/GraphQL API
webapp --> mainapi : REST/GraphQL API

' Backend service connections
mainapi --> mlservice : Internal API
mainapi --> sqldb : Database Operations
mainapi --> nosqldb : Logs & Analytics
mlservice --> nosqldb : ML Data Storage

' External service connections
mobile --> supabase_realtime : Real-time Chat
mobile --> fcm : Push Notifications
mainapi --> supabase_storage : Media Upload/Download
mainapi --> twilio : SMS/WhatsApp
mainapi --> supabase_realtime : Chat Backend

' Infrastructure connections
mainapi --> docker : Containerization
mlservice --> docker : Containerization
docker --> paas : Deployment
paas --> k8s : Optional Migration
mainapi --> monitoring : Metrics & Alerts
mlservice --> monitoring : ML Metrics
mainapi --> logging : Application Logs
mlservice --> logging : ML Logs

' CI/CD connections
cicd --> testing : Run Tests
cicd --> coverage : Generate Reports
cicd --> docker : Build Images
cicd --> paas : Auto Deploy

' Notes
note top of mobile
  React Native with Expo
  Cross-platform deployment
  FCM integration for notifications
end note

note top of webapp
  Modern React/Vue.js/Next.js
  Responsive design
  Admin functionalities
end note

note right of mainapi
  Node.js with Express/Fastify/Nest.js
  JWT Authentication
  API rate limiting
  Comprehensive logging
end note

note right of mlservice
  Python with FastAPI/Flask/Django
  Separate ML processing
  Model versioning
  Async processing
end note

note bottom of sqldb
  PostgreSQL for ACID compliance
  User data & transactions
  Relational integrity
end note

note bottom of nosqldb
  MongoDB for flexibility
  Logs & analytics
  Document storage
end note

@enduml
#+END_SRC

#+RESULTS:
[[file:assets/arch-1.png]]

* Decisiones de Arquitectura

** Microservicios
- Por qué se eligieron los microservicios específicos
- Beneficios obtenidos
- Desafíos enfrentados

** Tecnologías Utilizadas
- Razones para elegir Node.js, Python, PostgreSQL, etc.
- Alternativas consideradas y por qué se descartaron
- Integración entre tecnologías

* Funcionalidades Incompletas y Errores Conocidos

** Funcionalidades Pendientes
- Lista de features no implementadas
- Razones por las que no se completaron
- Planes para futuras iteraciones

** Errores Conocidos
- Bugs identificados en la entrega final
- Impacto en la funcionalidad
- Workarounds disponibles

* Problemas Encontrados y Lecciones Aprendidas

** Problemas Técnicos
- Desafíos durante el desarrollo
- Soluciones implementadas
- Tiempo invertido en resolverlos

** Lecciones Aprendidas
- Mejores prácticas descubiertas
- Cambios en el enfoque del proyecto
- Recomendaciones para proyectos futuros

* Demostraciones de Features Destacadas

** Feature 1: [Nombre de la Feature]
- Descripción de la implementación
- Por qué se destaca
- Código o diagrama relevante

** Feature 2: [Nombre de la Feature]
- Descripción de la implementación
- Por qué se destaca
- Código o diagrama relevante

